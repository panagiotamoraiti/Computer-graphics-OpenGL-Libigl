#version 330 core

struct Material
{
	float shininess;
	sampler2D awesomefaceTexture;
};

uniform Material material;

struct LightSource
{
	vec3 direction; // only for direcdtional light
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;
};

uniform LightSource lightSource;
in vec3 normal;
in vec3 fragmentPosition;
in vec2 textureCoordiantes;
uniform vec3 cameraPosition;

uniform sampler2D containerTexture;

float mixAmount = 0.5;
vec4 texture1;

void main()
{
	/*// ambient
	vec3 ambientColor = mix(texture(containerTexture, textureCoordiantes),
							  texture(awesomefaceTexture, textureCoordiantes), mixAmount).rgb * lightSource.ambientColor;
	
	// diffuse
	vec3 normal = normalize(normal);
	vec3 lightSourceDirection = normalize(-lightSource.direction); //	only for direcdtional light
	// A . B = |A| * |B| * cosè ---- |A| and |B| equals 1 if they are unit vectors, which they are.
	float diffuseAngle = max(dot(lightSourceDirection, normal), 0);
	vec3 diffuseColor = diffuseAngle * lightSource.diffuseColor * mix(texture(containerTexture, textureCoordiantes),
								          texture(awesomefaceTexture, textureCoordiantes), mixAmount).rgb * lightSource.ambientColor;

	// specular 
	vec3 reflectedLightDirection = reflect(-lightSourceDirection, normal);
	vec3 viewerDirection = normalize(cameraPosition - fragmentPosition);
	float specularAngle = pow(max(dot(reflectedLightDirection, viewerDirection), 0), material.shininess);
	vec3 specularColor = specularAngle * lightSource.specularColor * mix(texture(containerTexture, textureCoordiantes),
									     texture(awesomefaceTexture, textureCoordiantes), mixAmount).rgb * lightSource.ambientColor;*/
	
	// ambient
	vec3 ambientColor = texture(material.awesomefaceTexture, textureCoordiantes).rgb * lightSource.ambientColor;
	
	// diffuse
	vec3 normal = normalize(normal);
	vec3 lightSourceDirection = normalize(-lightSource.direction); //only for direcdtional light
	// A . B = |A| * |B| * cosè ---- |A| and |B| equals 1 if they are unit vectors, which they are.
	float diffuseAngle = max(dot(lightSourceDirection, normal), 0);
	vec3 diffuseColor = diffuseAngle * lightSource.diffuseColor * texture(material.awesomefaceTexture, textureCoordiantes).rgb;

	// specular 
	vec3 reflectedLightDirection = reflect(-lightSourceDirection, normal);
	vec3 viewerDirection = normalize(cameraPosition - fragmentPosition);
	float specularAngle = pow(max(dot(reflectedLightDirection, viewerDirection), 0), material.shininess);
	vec3 specularColor = specularAngle * lightSource.specularColor * texture(material.awesomefaceTexture, textureCoordiantes).rgb;
	
	if(texture(material.awesomefaceTexture, textureCoordiantes).rgba == vec4(0, 0, 0, 0))
	{
		ambientColor += texture(containerTexture, textureCoordiantes).rgb * lightSource.ambientColor;
		diffuseColor += diffuseAngle * lightSource.diffuseColor * texture(containerTexture, textureCoordiantes).rgb;
		specularColor += specularAngle * lightSource.specularColor * texture(containerTexture, textureCoordiantes).rgb;
		//texture1 = texture(containerTexture, textureCoordiantes);
	}
	else
	{
		texture1 = vec4(0, 0, 0, 0);
	}

	vec3 finalColor = ambientColor + diffuseColor + specularColor;
	gl_FragColor = vec4(finalColor, 1.0);
}