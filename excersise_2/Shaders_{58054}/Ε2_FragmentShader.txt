#version 330 core

in vec3 fragmentPosition;
uniform vec3 cameraPosition;

struct Material
{
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;
	float shininess;
};
uniform Material material;

struct DirLight 
{
    vec3 direction;
    vec3 ambientColor;
    vec3 diffuseColor;
    vec3 specularColor;
};  

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
   // ambient
	vec3 ambientColor = material.ambientColor * light.ambientColor;
	
	// diffuse
	vec3 lightSourceDirection = normalize(-light.direction); //	only for direcdtional light

	// A . B = |A| * |B| * cosè ---- |A| and |B| equals 1 if they are unit vectors, which they are.
	float diffuseAngle = max(dot(lightSourceDirection, normal), 0);
	vec3 diffuseColor = diffuseAngle * light.diffuseColor * material.diffuseColor;

	// specular 
	vec3 reflectedLightDirection = reflect(-lightSourceDirection, normal);

	float specularAngle = pow(max(dot(reflectedLightDirection, viewDir), 0), material.shininess);
	vec3 specularColor = specularAngle * light.specularColor * material.specularColor;

	vec3 finalColor = ambientColor + diffuseColor + specularColor;
	return finalColor;
}  

struct PointLight
{
	vec3 position;
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;
	float constant;
	float linear;
	float quadratic;
};

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	// ambient
	vec3 ambientColor = material.ambientColor * light.ambientColor;
	
	// diffuse
	vec3 lightSourceDirection = normalize(light.position - fragmentPosition);	

	// A . B = |A| * |B| * cosè ---- |A| and |B| equals 1 if they are unit vectors, which they are.
	float diffuseAngle = max(dot(lightSourceDirection, normal), 0);
	vec3 diffuseColor = diffuseAngle * light.diffuseColor * material.diffuseColor;

	// specular 
	vec3 reflectedLightDirection = reflect(-lightSourceDirection, normal);
	vec3 viewerDirection = normalize(cameraPosition - fragmentPosition);

	float specularAngle = pow(max(dot(reflectedLightDirection, viewDir), 0), material.shininess);
	vec3 specularColor = specularAngle * light.specularColor * material.specularColor;


	float distanceFromLightSource = length(light.position - fragmentPosition);
	float attenuation = 1.0 / ( light.constant + light.linear * distanceFromLightSource +
								 light.quadratic * distanceFromLightSource * distanceFromLightSource);

	ambientColor *= attenuation;
	diffuseColor *= attenuation;
	specularColor *= attenuation;

	vec3 finalColor = ambientColor + diffuseColor + specularColor;
	return finalColor;
}

#define NR_POINT_LIGHTS 3 
uniform PointLight pointLights[NR_POINT_LIGHTS];
#define NR_DIR_LIGHTS 3 
uniform DirLight dirLights[NR_DIR_LIGHTS];
in vec3 normal;

void main()
{
	vec3 normal = normalize(normal);
	vec3 viewerDirection = normalize(cameraPosition - fragmentPosition);
	vec3 result;

	// phase 1: Directional lighting
    for(int i = 0; i < NR_POINT_LIGHTS; i++)
	{
		result += CalcDirLight(dirLights[i], normal, viewerDirection); 
	}

    // phase 2: Point lights
    for(int i = 0; i < NR_POINT_LIGHTS; i++)
	{
		result += CalcPointLight(pointLights[i], normal, fragmentPosition, viewerDirection); 
	}
           
    // phase 3: Spot light
    //result += CalcSpotLight(spotLight, norm, FragPos, viewDir);
	//result = CalcDirLight(dirLight, norm, viewDir);
	gl_FragColor = vec4(result, 1.0);
}