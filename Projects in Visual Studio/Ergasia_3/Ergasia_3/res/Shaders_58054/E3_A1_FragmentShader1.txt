#version 330 core

uniform bool mode_key_1;

struct Material
{
	sampler2D awesomefaceTexture;
	float shininess;
};

uniform Material material;

struct LightSource
{
	vec3 direction; // only for direcdtional light
	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;
};

uniform LightSource lightSource;
in vec3 normal;
in vec3 fragmentPosition;
in vec2 textureCoordiantes;

uniform vec3 cameraPosition;
float mixAmount = 0.5;

vec2 coordiantesnotflipped=textureCoordiantes;
vec2 coordiantesflipped=vec2(1.0 - textureCoordiantes.x, textureCoordiantes.y);
vec2 textureCoordiantes1;


void main()
{		
	if (mode_key_1==false)
		{
			//Dont flip the face-Left side.
			textureCoordiantes1=coordiantesnotflipped;
		}
		else
		{
			//Flip the face-Right side.
			textureCoordiantes1=coordiantesflipped;
		}
	
	// ambient
	vec3 ambientColor = texture(material.awesomefaceTexture, textureCoordiantes1).rgb * lightSource.ambientColor;
	
	// diffuse
	vec3 normal = normalize(normal);
	vec3 lightSourceDirection = normalize(-lightSource.direction); //only for direcdtional light
	// A . B = |A| * |B| * cosè ---- |A| and |B| equals 1 if they are unit vectors, which they are.
	float diffuseAngle = max(dot(lightSourceDirection, normal), 0);
	vec3 diffuseColor = diffuseAngle * lightSource.diffuseColor * texture(material.awesomefaceTexture, textureCoordiantes1).rgb;

	// specular 
	vec3 reflectedLightDirection = reflect(-lightSourceDirection, normal);
	vec3 viewerDirection = normalize(cameraPosition - fragmentPosition);
	float specularAngle = pow(max(dot(reflectedLightDirection, viewerDirection), 0), material.shininess);
	vec3 specularColor = specularAngle * lightSource.specularColor * texture(material.awesomefaceTexture, textureCoordiantes1).rgb;

	vec3 finalColor = ambientColor + diffuseColor + specularColor;
	gl_FragColor = vec4(finalColor, 1.0);
}